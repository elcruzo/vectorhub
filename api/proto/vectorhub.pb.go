// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v6.32.1
// source: api/proto/vectorhub.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Vector struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Values        []float32              `protobuf:"fixed32,2,rep,packed,name=values,proto3" json:"values,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Timestamp     int64                  `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Vector) Reset() {
	*x = Vector{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vector) ProtoMessage() {}

func (x *Vector) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vector.ProtoReflect.Descriptor instead.
func (*Vector) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{0}
}

func (x *Vector) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Vector) GetValues() []float32 {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Vector) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Vector) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type InsertRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IndexName     string                 `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	Vector        *Vector                `protobuf:"bytes,2,opt,name=vector,proto3" json:"vector,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InsertRequest) Reset() {
	*x = InsertRequest{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertRequest) ProtoMessage() {}

func (x *InsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertRequest.ProtoReflect.Descriptor instead.
func (*InsertRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{1}
}

func (x *InsertRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *InsertRequest) GetVector() *Vector {
	if x != nil {
		return x.Vector
	}
	return nil
}

type InsertResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	VectorId      string                 `protobuf:"bytes,3,opt,name=vector_id,json=vectorId,proto3" json:"vector_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InsertResponse) Reset() {
	*x = InsertResponse{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InsertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertResponse) ProtoMessage() {}

func (x *InsertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertResponse.ProtoReflect.Descriptor instead.
func (*InsertResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{2}
}

func (x *InsertResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *InsertResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *InsertResponse) GetVectorId() string {
	if x != nil {
		return x.VectorId
	}
	return ""
}

type BatchInsertRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IndexName     string                 `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	Vectors       []*Vector              `protobuf:"bytes,2,rep,name=vectors,proto3" json:"vectors,omitempty"`
	Parallel      bool                   `protobuf:"varint,3,opt,name=parallel,proto3" json:"parallel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchInsertRequest) Reset() {
	*x = BatchInsertRequest{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchInsertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInsertRequest) ProtoMessage() {}

func (x *BatchInsertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInsertRequest.ProtoReflect.Descriptor instead.
func (*BatchInsertRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{3}
}

func (x *BatchInsertRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *BatchInsertRequest) GetVectors() []*Vector {
	if x != nil {
		return x.Vectors
	}
	return nil
}

func (x *BatchInsertRequest) GetParallel() bool {
	if x != nil {
		return x.Parallel
	}
	return false
}

type BatchInsertResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	InsertedCount int32                  `protobuf:"varint,3,opt,name=inserted_count,json=insertedCount,proto3" json:"inserted_count,omitempty"`
	FailedIds     []string               `protobuf:"bytes,4,rep,name=failed_ids,json=failedIds,proto3" json:"failed_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchInsertResponse) Reset() {
	*x = BatchInsertResponse{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchInsertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInsertResponse) ProtoMessage() {}

func (x *BatchInsertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInsertResponse.ProtoReflect.Descriptor instead.
func (*BatchInsertResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{4}
}

func (x *BatchInsertResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BatchInsertResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BatchInsertResponse) GetInsertedCount() int32 {
	if x != nil {
		return x.InsertedCount
	}
	return 0
}

func (x *BatchInsertResponse) GetFailedIds() []string {
	if x != nil {
		return x.FailedIds
	}
	return nil
}

type SearchRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	IndexName       string                 `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	QueryVector     []float32              `protobuf:"fixed32,2,rep,packed,name=query_vector,json=queryVector,proto3" json:"query_vector,omitempty"`
	TopK            int32                  `protobuf:"varint,3,opt,name=top_k,json=topK,proto3" json:"top_k,omitempty"`
	Filter          map[string]string      `protobuf:"bytes,4,rep,name=filter,proto3" json:"filter,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MinScore        float32                `protobuf:"fixed32,5,opt,name=min_score,json=minScore,proto3" json:"min_score,omitempty"`
	IncludeMetadata bool                   `protobuf:"varint,6,opt,name=include_metadata,json=includeMetadata,proto3" json:"include_metadata,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SearchRequest) Reset() {
	*x = SearchRequest{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRequest) ProtoMessage() {}

func (x *SearchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRequest.ProtoReflect.Descriptor instead.
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{5}
}

func (x *SearchRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *SearchRequest) GetQueryVector() []float32 {
	if x != nil {
		return x.QueryVector
	}
	return nil
}

func (x *SearchRequest) GetTopK() int32 {
	if x != nil {
		return x.TopK
	}
	return 0
}

func (x *SearchRequest) GetFilter() map[string]string {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *SearchRequest) GetMinScore() float32 {
	if x != nil {
		return x.MinScore
	}
	return 0
}

func (x *SearchRequest) GetIncludeMetadata() bool {
	if x != nil {
		return x.IncludeMetadata
	}
	return false
}

type SearchResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Score         float32                `protobuf:"fixed32,2,opt,name=score,proto3" json:"score,omitempty"`
	Vector        *Vector                `protobuf:"bytes,3,opt,name=vector,proto3" json:"vector,omitempty"`
	Distance      float32                `protobuf:"fixed32,4,opt,name=distance,proto3" json:"distance,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchResult) Reset() {
	*x = SearchResult{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResult) ProtoMessage() {}

func (x *SearchResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResult.ProtoReflect.Descriptor instead.
func (*SearchResult) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{6}
}

func (x *SearchResult) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SearchResult) GetScore() float32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *SearchResult) GetVector() *Vector {
	if x != nil {
		return x.Vector
	}
	return nil
}

func (x *SearchResult) GetDistance() float32 {
	if x != nil {
		return x.Distance
	}
	return 0
}

type SearchResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Results       []*SearchResult        `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	SearchTimeMs  int64                  `protobuf:"varint,4,opt,name=search_time_ms,json=searchTimeMs,proto3" json:"search_time_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchResponse) Reset() {
	*x = SearchResponse{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchResponse) ProtoMessage() {}

func (x *SearchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchResponse.ProtoReflect.Descriptor instead.
func (*SearchResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{7}
}

func (x *SearchResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SearchResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SearchResponse) GetResults() []*SearchResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *SearchResponse) GetSearchTimeMs() int64 {
	if x != nil {
		return x.SearchTimeMs
	}
	return 0
}

type GetRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IndexName     string                 `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	VectorId      string                 `protobuf:"bytes,2,opt,name=vector_id,json=vectorId,proto3" json:"vector_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{8}
}

func (x *GetRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *GetRequest) GetVectorId() string {
	if x != nil {
		return x.VectorId
	}
	return ""
}

type GetResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Vector        *Vector                `protobuf:"bytes,3,opt,name=vector,proto3" json:"vector,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetResponse) Reset() {
	*x = GetResponse{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetResponse) ProtoMessage() {}

func (x *GetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetResponse.ProtoReflect.Descriptor instead.
func (*GetResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{9}
}

func (x *GetResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetResponse) GetVector() *Vector {
	if x != nil {
		return x.Vector
	}
	return nil
}

type UpdateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IndexName     string                 `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	VectorId      string                 `protobuf:"bytes,2,opt,name=vector_id,json=vectorId,proto3" json:"vector_id,omitempty"`
	Vector        *Vector                `protobuf:"bytes,3,opt,name=vector,proto3" json:"vector,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *UpdateRequest) GetVectorId() string {
	if x != nil {
		return x.VectorId
	}
	return ""
}

func (x *UpdateRequest) GetVector() *Vector {
	if x != nil {
		return x.Vector
	}
	return nil
}

type UpdateResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DeleteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IndexName     string                 `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	VectorId      string                 `protobuf:"bytes,2,opt,name=vector_id,json=vectorId,proto3" json:"vector_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *DeleteRequest) GetVectorId() string {
	if x != nil {
		return x.VectorId
	}
	return ""
}

type DeleteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type BatchDeleteRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IndexName     string                 `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	VectorIds     []string               `protobuf:"bytes,2,rep,name=vector_ids,json=vectorIds,proto3" json:"vector_ids,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchDeleteRequest) Reset() {
	*x = BatchDeleteRequest{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteRequest) ProtoMessage() {}

func (x *BatchDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteRequest.ProtoReflect.Descriptor instead.
func (*BatchDeleteRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{14}
}

func (x *BatchDeleteRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *BatchDeleteRequest) GetVectorIds() []string {
	if x != nil {
		return x.VectorIds
	}
	return nil
}

type BatchDeleteResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	DeletedCount  int32                  `protobuf:"varint,3,opt,name=deleted_count,json=deletedCount,proto3" json:"deleted_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchDeleteResponse) Reset() {
	*x = BatchDeleteResponse{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchDeleteResponse) ProtoMessage() {}

func (x *BatchDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchDeleteResponse.ProtoReflect.Descriptor instead.
func (*BatchDeleteResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{15}
}

func (x *BatchDeleteResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *BatchDeleteResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *BatchDeleteResponse) GetDeletedCount() int32 {
	if x != nil {
		return x.DeletedCount
	}
	return 0
}

type CreateIndexRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IndexName     string                 `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	Dimension     int32                  `protobuf:"varint,2,opt,name=dimension,proto3" json:"dimension,omitempty"`
	Metric        string                 `protobuf:"bytes,3,opt,name=metric,proto3" json:"metric,omitempty"` // cosine, euclidean, dot_product
	ShardCount    int32                  `protobuf:"varint,4,opt,name=shard_count,json=shardCount,proto3" json:"shard_count,omitempty"`
	ReplicaCount  int32                  `protobuf:"varint,5,opt,name=replica_count,json=replicaCount,proto3" json:"replica_count,omitempty"`
	Options       map[string]string      `protobuf:"bytes,6,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateIndexRequest) Reset() {
	*x = CreateIndexRequest{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIndexRequest) ProtoMessage() {}

func (x *CreateIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIndexRequest.ProtoReflect.Descriptor instead.
func (*CreateIndexRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{16}
}

func (x *CreateIndexRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

func (x *CreateIndexRequest) GetDimension() int32 {
	if x != nil {
		return x.Dimension
	}
	return 0
}

func (x *CreateIndexRequest) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *CreateIndexRequest) GetShardCount() int32 {
	if x != nil {
		return x.ShardCount
	}
	return 0
}

func (x *CreateIndexRequest) GetReplicaCount() int32 {
	if x != nil {
		return x.ReplicaCount
	}
	return 0
}

func (x *CreateIndexRequest) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type CreateIndexResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateIndexResponse) Reset() {
	*x = CreateIndexResponse{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateIndexResponse) ProtoMessage() {}

func (x *CreateIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateIndexResponse.ProtoReflect.Descriptor instead.
func (*CreateIndexResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{17}
}

func (x *CreateIndexResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CreateIndexResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DropIndexRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IndexName     string                 `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DropIndexRequest) Reset() {
	*x = DropIndexRequest{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropIndexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropIndexRequest) ProtoMessage() {}

func (x *DropIndexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropIndexRequest.ProtoReflect.Descriptor instead.
func (*DropIndexRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{18}
}

func (x *DropIndexRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type DropIndexResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DropIndexResponse) Reset() {
	*x = DropIndexResponse{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DropIndexResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropIndexResponse) ProtoMessage() {}

func (x *DropIndexResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropIndexResponse.ProtoReflect.Descriptor instead.
func (*DropIndexResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{19}
}

func (x *DropIndexResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DropIndexResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IndexName     string                 `protobuf:"bytes,1,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStatsRequest) Reset() {
	*x = GetStatsRequest{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatsRequest) ProtoMessage() {}

func (x *GetStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatsRequest.ProtoReflect.Descriptor instead.
func (*GetStatsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{20}
}

func (x *GetStatsRequest) GetIndexName() string {
	if x != nil {
		return x.IndexName
	}
	return ""
}

type IndexStats struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	VectorCount      int64                  `protobuf:"varint,1,opt,name=vector_count,json=vectorCount,proto3" json:"vector_count,omitempty"`
	Dimension        int32                  `protobuf:"varint,2,opt,name=dimension,proto3" json:"dimension,omitempty"`
	Metric           string                 `protobuf:"bytes,3,opt,name=metric,proto3" json:"metric,omitempty"`
	ShardCount       int32                  `protobuf:"varint,4,opt,name=shard_count,json=shardCount,proto3" json:"shard_count,omitempty"`
	ReplicaCount     int32                  `protobuf:"varint,5,opt,name=replica_count,json=replicaCount,proto3" json:"replica_count,omitempty"`
	MemoryUsageBytes int64                  `protobuf:"varint,6,opt,name=memory_usage_bytes,json=memoryUsageBytes,proto3" json:"memory_usage_bytes,omitempty"`
	ShardStats       map[int32]*ShardStats  `protobuf:"bytes,7,rep,name=shard_stats,json=shardStats,proto3" json:"shard_stats,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *IndexStats) Reset() {
	*x = IndexStats{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexStats) ProtoMessage() {}

func (x *IndexStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexStats.ProtoReflect.Descriptor instead.
func (*IndexStats) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{21}
}

func (x *IndexStats) GetVectorCount() int64 {
	if x != nil {
		return x.VectorCount
	}
	return 0
}

func (x *IndexStats) GetDimension() int32 {
	if x != nil {
		return x.Dimension
	}
	return 0
}

func (x *IndexStats) GetMetric() string {
	if x != nil {
		return x.Metric
	}
	return ""
}

func (x *IndexStats) GetShardCount() int32 {
	if x != nil {
		return x.ShardCount
	}
	return 0
}

func (x *IndexStats) GetReplicaCount() int32 {
	if x != nil {
		return x.ReplicaCount
	}
	return 0
}

func (x *IndexStats) GetMemoryUsageBytes() int64 {
	if x != nil {
		return x.MemoryUsageBytes
	}
	return 0
}

func (x *IndexStats) GetShardStats() map[int32]*ShardStats {
	if x != nil {
		return x.ShardStats
	}
	return nil
}

type ShardStats struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	ShardId          int32                  `protobuf:"varint,1,opt,name=shard_id,json=shardId,proto3" json:"shard_id,omitempty"`
	VectorCount      int64                  `protobuf:"varint,2,opt,name=vector_count,json=vectorCount,proto3" json:"vector_count,omitempty"`
	Status           string                 `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	ReplicaNodes     []string               `protobuf:"bytes,4,rep,name=replica_nodes,json=replicaNodes,proto3" json:"replica_nodes,omitempty"`
	MemoryUsageBytes int64                  `protobuf:"varint,5,opt,name=memory_usage_bytes,json=memoryUsageBytes,proto3" json:"memory_usage_bytes,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ShardStats) Reset() {
	*x = ShardStats{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShardStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardStats) ProtoMessage() {}

func (x *ShardStats) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardStats.ProtoReflect.Descriptor instead.
func (*ShardStats) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{22}
}

func (x *ShardStats) GetShardId() int32 {
	if x != nil {
		return x.ShardId
	}
	return 0
}

func (x *ShardStats) GetVectorCount() int64 {
	if x != nil {
		return x.VectorCount
	}
	return 0
}

func (x *ShardStats) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ShardStats) GetReplicaNodes() []string {
	if x != nil {
		return x.ReplicaNodes
	}
	return nil
}

func (x *ShardStats) GetMemoryUsageBytes() int64 {
	if x != nil {
		return x.MemoryUsageBytes
	}
	return 0
}

type GetStatsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Stats         *IndexStats            `protobuf:"bytes,3,opt,name=stats,proto3" json:"stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStatsResponse) Reset() {
	*x = GetStatsResponse{}
	mi := &file_api_proto_vectorhub_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStatsResponse) ProtoMessage() {}

func (x *GetStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_vectorhub_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStatsResponse.ProtoReflect.Descriptor instead.
func (*GetStatsResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_vectorhub_proto_rawDescGZIP(), []int{23}
}

func (x *GetStatsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *GetStatsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *GetStatsResponse) GetStats() *IndexStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

var File_api_proto_vectorhub_proto protoreflect.FileDescriptor

const file_api_proto_vectorhub_proto_rawDesc = "" +
	"\n" +
	"\x19api/proto/vectorhub.proto\x12\x10vectorhub.api.v1\"\xcf\x01\n" +
	"\x06Vector\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x16\n" +
	"\x06values\x18\x02 \x03(\x02R\x06values\x12B\n" +
	"\bmetadata\x18\x03 \x03(\v2&.vectorhub.api.v1.Vector.MetadataEntryR\bmetadata\x12\x1c\n" +
	"\ttimestamp\x18\x04 \x01(\x03R\ttimestamp\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"`\n" +
	"\rInsertRequest\x12\x1d\n" +
	"\n" +
	"index_name\x18\x01 \x01(\tR\tindexName\x120\n" +
	"\x06vector\x18\x02 \x01(\v2\x18.vectorhub.api.v1.VectorR\x06vector\"a\n" +
	"\x0eInsertResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1b\n" +
	"\tvector_id\x18\x03 \x01(\tR\bvectorId\"\x83\x01\n" +
	"\x12BatchInsertRequest\x12\x1d\n" +
	"\n" +
	"index_name\x18\x01 \x01(\tR\tindexName\x122\n" +
	"\avectors\x18\x02 \x03(\v2\x18.vectorhub.api.v1.VectorR\avectors\x12\x1a\n" +
	"\bparallel\x18\x03 \x01(\bR\bparallel\"\x8f\x01\n" +
	"\x13BatchInsertResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12%\n" +
	"\x0einserted_count\x18\x03 \x01(\x05R\rinsertedCount\x12\x1d\n" +
	"\n" +
	"failed_ids\x18\x04 \x03(\tR\tfailedIds\"\xae\x02\n" +
	"\rSearchRequest\x12\x1d\n" +
	"\n" +
	"index_name\x18\x01 \x01(\tR\tindexName\x12!\n" +
	"\fquery_vector\x18\x02 \x03(\x02R\vqueryVector\x12\x13\n" +
	"\x05top_k\x18\x03 \x01(\x05R\x04topK\x12C\n" +
	"\x06filter\x18\x04 \x03(\v2+.vectorhub.api.v1.SearchRequest.FilterEntryR\x06filter\x12\x1b\n" +
	"\tmin_score\x18\x05 \x01(\x02R\bminScore\x12)\n" +
	"\x10include_metadata\x18\x06 \x01(\bR\x0fincludeMetadata\x1a9\n" +
	"\vFilterEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x82\x01\n" +
	"\fSearchResult\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x14\n" +
	"\x05score\x18\x02 \x01(\x02R\x05score\x120\n" +
	"\x06vector\x18\x03 \x01(\v2\x18.vectorhub.api.v1.VectorR\x06vector\x12\x1a\n" +
	"\bdistance\x18\x04 \x01(\x02R\bdistance\"\xa4\x01\n" +
	"\x0eSearchResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x128\n" +
	"\aresults\x18\x03 \x03(\v2\x1e.vectorhub.api.v1.SearchResultR\aresults\x12$\n" +
	"\x0esearch_time_ms\x18\x04 \x01(\x03R\fsearchTimeMs\"H\n" +
	"\n" +
	"GetRequest\x12\x1d\n" +
	"\n" +
	"index_name\x18\x01 \x01(\tR\tindexName\x12\x1b\n" +
	"\tvector_id\x18\x02 \x01(\tR\bvectorId\"s\n" +
	"\vGetResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x120\n" +
	"\x06vector\x18\x03 \x01(\v2\x18.vectorhub.api.v1.VectorR\x06vector\"}\n" +
	"\rUpdateRequest\x12\x1d\n" +
	"\n" +
	"index_name\x18\x01 \x01(\tR\tindexName\x12\x1b\n" +
	"\tvector_id\x18\x02 \x01(\tR\bvectorId\x120\n" +
	"\x06vector\x18\x03 \x01(\v2\x18.vectorhub.api.v1.VectorR\x06vector\"D\n" +
	"\x0eUpdateResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"K\n" +
	"\rDeleteRequest\x12\x1d\n" +
	"\n" +
	"index_name\x18\x01 \x01(\tR\tindexName\x12\x1b\n" +
	"\tvector_id\x18\x02 \x01(\tR\bvectorId\"D\n" +
	"\x0eDeleteResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"R\n" +
	"\x12BatchDeleteRequest\x12\x1d\n" +
	"\n" +
	"index_name\x18\x01 \x01(\tR\tindexName\x12\x1d\n" +
	"\n" +
	"vector_ids\x18\x02 \x03(\tR\tvectorIds\"n\n" +
	"\x13BatchDeleteResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12#\n" +
	"\rdeleted_count\x18\x03 \x01(\x05R\fdeletedCount\"\xb8\x02\n" +
	"\x12CreateIndexRequest\x12\x1d\n" +
	"\n" +
	"index_name\x18\x01 \x01(\tR\tindexName\x12\x1c\n" +
	"\tdimension\x18\x02 \x01(\x05R\tdimension\x12\x16\n" +
	"\x06metric\x18\x03 \x01(\tR\x06metric\x12\x1f\n" +
	"\vshard_count\x18\x04 \x01(\x05R\n" +
	"shardCount\x12#\n" +
	"\rreplica_count\x18\x05 \x01(\x05R\freplicaCount\x12K\n" +
	"\aoptions\x18\x06 \x03(\v21.vectorhub.api.v1.CreateIndexRequest.OptionsEntryR\aoptions\x1a:\n" +
	"\fOptionsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"I\n" +
	"\x13CreateIndexResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"1\n" +
	"\x10DropIndexRequest\x12\x1d\n" +
	"\n" +
	"index_name\x18\x01 \x01(\tR\tindexName\"G\n" +
	"\x11DropIndexResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\"0\n" +
	"\x0fGetStatsRequest\x12\x1d\n" +
	"\n" +
	"index_name\x18\x01 \x01(\tR\tindexName\"\x85\x03\n" +
	"\n" +
	"IndexStats\x12!\n" +
	"\fvector_count\x18\x01 \x01(\x03R\vvectorCount\x12\x1c\n" +
	"\tdimension\x18\x02 \x01(\x05R\tdimension\x12\x16\n" +
	"\x06metric\x18\x03 \x01(\tR\x06metric\x12\x1f\n" +
	"\vshard_count\x18\x04 \x01(\x05R\n" +
	"shardCount\x12#\n" +
	"\rreplica_count\x18\x05 \x01(\x05R\freplicaCount\x12,\n" +
	"\x12memory_usage_bytes\x18\x06 \x01(\x03R\x10memoryUsageBytes\x12M\n" +
	"\vshard_stats\x18\a \x03(\v2,.vectorhub.api.v1.IndexStats.ShardStatsEntryR\n" +
	"shardStats\x1a[\n" +
	"\x0fShardStatsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.vectorhub.api.v1.ShardStatsR\x05value:\x028\x01\"\xb5\x01\n" +
	"\n" +
	"ShardStats\x12\x19\n" +
	"\bshard_id\x18\x01 \x01(\x05R\ashardId\x12!\n" +
	"\fvector_count\x18\x02 \x01(\x03R\vvectorCount\x12\x16\n" +
	"\x06status\x18\x03 \x01(\tR\x06status\x12#\n" +
	"\rreplica_nodes\x18\x04 \x03(\tR\freplicaNodes\x12,\n" +
	"\x12memory_usage_bytes\x18\x05 \x01(\x03R\x10memoryUsageBytes\"z\n" +
	"\x10GetStatsResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x122\n" +
	"\x05stats\x18\x03 \x01(\v2\x1c.vectorhub.api.v1.IndexStatsR\x05stats2\xd8\x06\n" +
	"\rVectorService\x12M\n" +
	"\x06Insert\x12\x1f.vectorhub.api.v1.InsertRequest\x1a .vectorhub.api.v1.InsertResponse\"\x00\x12\\\n" +
	"\vBatchInsert\x12$.vectorhub.api.v1.BatchInsertRequest\x1a%.vectorhub.api.v1.BatchInsertResponse\"\x00\x12M\n" +
	"\x06Search\x12\x1f.vectorhub.api.v1.SearchRequest\x1a .vectorhub.api.v1.SearchResponse\"\x00\x12D\n" +
	"\x03Get\x12\x1c.vectorhub.api.v1.GetRequest\x1a\x1d.vectorhub.api.v1.GetResponse\"\x00\x12M\n" +
	"\x06Update\x12\x1f.vectorhub.api.v1.UpdateRequest\x1a .vectorhub.api.v1.UpdateResponse\"\x00\x12M\n" +
	"\x06Delete\x12\x1f.vectorhub.api.v1.DeleteRequest\x1a .vectorhub.api.v1.DeleteResponse\"\x00\x12\\\n" +
	"\vBatchDelete\x12$.vectorhub.api.v1.BatchDeleteRequest\x1a%.vectorhub.api.v1.BatchDeleteResponse\"\x00\x12\\\n" +
	"\vCreateIndex\x12$.vectorhub.api.v1.CreateIndexRequest\x1a%.vectorhub.api.v1.CreateIndexResponse\"\x00\x12V\n" +
	"\tDropIndex\x12\".vectorhub.api.v1.DropIndexRequest\x1a#.vectorhub.api.v1.DropIndexResponse\"\x00\x12S\n" +
	"\bGetStats\x12!.vectorhub.api.v1.GetStatsRequest\x1a\".vectorhub.api.v1.GetStatsResponse\"\x00B(Z&github.com/elcruzo/vectorhub/api/protob\x06proto3"

var (
	file_api_proto_vectorhub_proto_rawDescOnce sync.Once
	file_api_proto_vectorhub_proto_rawDescData []byte
)

func file_api_proto_vectorhub_proto_rawDescGZIP() []byte {
	file_api_proto_vectorhub_proto_rawDescOnce.Do(func() {
		file_api_proto_vectorhub_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_proto_vectorhub_proto_rawDesc), len(file_api_proto_vectorhub_proto_rawDesc)))
	})
	return file_api_proto_vectorhub_proto_rawDescData
}

var file_api_proto_vectorhub_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_api_proto_vectorhub_proto_goTypes = []any{
	(*Vector)(nil),              // 0: vectorhub.api.v1.Vector
	(*InsertRequest)(nil),       // 1: vectorhub.api.v1.InsertRequest
	(*InsertResponse)(nil),      // 2: vectorhub.api.v1.InsertResponse
	(*BatchInsertRequest)(nil),  // 3: vectorhub.api.v1.BatchInsertRequest
	(*BatchInsertResponse)(nil), // 4: vectorhub.api.v1.BatchInsertResponse
	(*SearchRequest)(nil),       // 5: vectorhub.api.v1.SearchRequest
	(*SearchResult)(nil),        // 6: vectorhub.api.v1.SearchResult
	(*SearchResponse)(nil),      // 7: vectorhub.api.v1.SearchResponse
	(*GetRequest)(nil),          // 8: vectorhub.api.v1.GetRequest
	(*GetResponse)(nil),         // 9: vectorhub.api.v1.GetResponse
	(*UpdateRequest)(nil),       // 10: vectorhub.api.v1.UpdateRequest
	(*UpdateResponse)(nil),      // 11: vectorhub.api.v1.UpdateResponse
	(*DeleteRequest)(nil),       // 12: vectorhub.api.v1.DeleteRequest
	(*DeleteResponse)(nil),      // 13: vectorhub.api.v1.DeleteResponse
	(*BatchDeleteRequest)(nil),  // 14: vectorhub.api.v1.BatchDeleteRequest
	(*BatchDeleteResponse)(nil), // 15: vectorhub.api.v1.BatchDeleteResponse
	(*CreateIndexRequest)(nil),  // 16: vectorhub.api.v1.CreateIndexRequest
	(*CreateIndexResponse)(nil), // 17: vectorhub.api.v1.CreateIndexResponse
	(*DropIndexRequest)(nil),    // 18: vectorhub.api.v1.DropIndexRequest
	(*DropIndexResponse)(nil),   // 19: vectorhub.api.v1.DropIndexResponse
	(*GetStatsRequest)(nil),     // 20: vectorhub.api.v1.GetStatsRequest
	(*IndexStats)(nil),          // 21: vectorhub.api.v1.IndexStats
	(*ShardStats)(nil),          // 22: vectorhub.api.v1.ShardStats
	(*GetStatsResponse)(nil),    // 23: vectorhub.api.v1.GetStatsResponse
	nil,                         // 24: vectorhub.api.v1.Vector.MetadataEntry
	nil,                         // 25: vectorhub.api.v1.SearchRequest.FilterEntry
	nil,                         // 26: vectorhub.api.v1.CreateIndexRequest.OptionsEntry
	nil,                         // 27: vectorhub.api.v1.IndexStats.ShardStatsEntry
}
var file_api_proto_vectorhub_proto_depIdxs = []int32{
	24, // 0: vectorhub.api.v1.Vector.metadata:type_name -> vectorhub.api.v1.Vector.MetadataEntry
	0,  // 1: vectorhub.api.v1.InsertRequest.vector:type_name -> vectorhub.api.v1.Vector
	0,  // 2: vectorhub.api.v1.BatchInsertRequest.vectors:type_name -> vectorhub.api.v1.Vector
	25, // 3: vectorhub.api.v1.SearchRequest.filter:type_name -> vectorhub.api.v1.SearchRequest.FilterEntry
	0,  // 4: vectorhub.api.v1.SearchResult.vector:type_name -> vectorhub.api.v1.Vector
	6,  // 5: vectorhub.api.v1.SearchResponse.results:type_name -> vectorhub.api.v1.SearchResult
	0,  // 6: vectorhub.api.v1.GetResponse.vector:type_name -> vectorhub.api.v1.Vector
	0,  // 7: vectorhub.api.v1.UpdateRequest.vector:type_name -> vectorhub.api.v1.Vector
	26, // 8: vectorhub.api.v1.CreateIndexRequest.options:type_name -> vectorhub.api.v1.CreateIndexRequest.OptionsEntry
	27, // 9: vectorhub.api.v1.IndexStats.shard_stats:type_name -> vectorhub.api.v1.IndexStats.ShardStatsEntry
	21, // 10: vectorhub.api.v1.GetStatsResponse.stats:type_name -> vectorhub.api.v1.IndexStats
	22, // 11: vectorhub.api.v1.IndexStats.ShardStatsEntry.value:type_name -> vectorhub.api.v1.ShardStats
	1,  // 12: vectorhub.api.v1.VectorService.Insert:input_type -> vectorhub.api.v1.InsertRequest
	3,  // 13: vectorhub.api.v1.VectorService.BatchInsert:input_type -> vectorhub.api.v1.BatchInsertRequest
	5,  // 14: vectorhub.api.v1.VectorService.Search:input_type -> vectorhub.api.v1.SearchRequest
	8,  // 15: vectorhub.api.v1.VectorService.Get:input_type -> vectorhub.api.v1.GetRequest
	10, // 16: vectorhub.api.v1.VectorService.Update:input_type -> vectorhub.api.v1.UpdateRequest
	12, // 17: vectorhub.api.v1.VectorService.Delete:input_type -> vectorhub.api.v1.DeleteRequest
	14, // 18: vectorhub.api.v1.VectorService.BatchDelete:input_type -> vectorhub.api.v1.BatchDeleteRequest
	16, // 19: vectorhub.api.v1.VectorService.CreateIndex:input_type -> vectorhub.api.v1.CreateIndexRequest
	18, // 20: vectorhub.api.v1.VectorService.DropIndex:input_type -> vectorhub.api.v1.DropIndexRequest
	20, // 21: vectorhub.api.v1.VectorService.GetStats:input_type -> vectorhub.api.v1.GetStatsRequest
	2,  // 22: vectorhub.api.v1.VectorService.Insert:output_type -> vectorhub.api.v1.InsertResponse
	4,  // 23: vectorhub.api.v1.VectorService.BatchInsert:output_type -> vectorhub.api.v1.BatchInsertResponse
	7,  // 24: vectorhub.api.v1.VectorService.Search:output_type -> vectorhub.api.v1.SearchResponse
	9,  // 25: vectorhub.api.v1.VectorService.Get:output_type -> vectorhub.api.v1.GetResponse
	11, // 26: vectorhub.api.v1.VectorService.Update:output_type -> vectorhub.api.v1.UpdateResponse
	13, // 27: vectorhub.api.v1.VectorService.Delete:output_type -> vectorhub.api.v1.DeleteResponse
	15, // 28: vectorhub.api.v1.VectorService.BatchDelete:output_type -> vectorhub.api.v1.BatchDeleteResponse
	17, // 29: vectorhub.api.v1.VectorService.CreateIndex:output_type -> vectorhub.api.v1.CreateIndexResponse
	19, // 30: vectorhub.api.v1.VectorService.DropIndex:output_type -> vectorhub.api.v1.DropIndexResponse
	23, // 31: vectorhub.api.v1.VectorService.GetStats:output_type -> vectorhub.api.v1.GetStatsResponse
	22, // [22:32] is the sub-list for method output_type
	12, // [12:22] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_api_proto_vectorhub_proto_init() }
func file_api_proto_vectorhub_proto_init() {
	if File_api_proto_vectorhub_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_proto_vectorhub_proto_rawDesc), len(file_api_proto_vectorhub_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_vectorhub_proto_goTypes,
		DependencyIndexes: file_api_proto_vectorhub_proto_depIdxs,
		MessageInfos:      file_api_proto_vectorhub_proto_msgTypes,
	}.Build()
	File_api_proto_vectorhub_proto = out.File
	file_api_proto_vectorhub_proto_goTypes = nil
	file_api_proto_vectorhub_proto_depIdxs = nil
}
